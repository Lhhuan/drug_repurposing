"""
Version of generateDifferenceTable script that works with multi_matrix
results.

Note that the seed.* format for the multi_matrix script is slightly different
from the previous format, generated by multi_graph/old RWR code.
(That is, each run of multi_matrix outputs a list of gene IDs, ordered by
their probability in the converged RWR and delimited by newlines.)

TODO: - parts of this are hacky (filtering out seed genes, etc)
      - document this more thoroughly in LabArchives
"""
import sys
import operator
import shared_functions as sh

TOP = 25

def write_diff_list(diff_list, tissue_list, seed_number, gene_rank, id_symbol_map):
    """ Write the calculated diff scores to a rankdiff file """
    diff_file = "./seed{}.rankdiff".format(seed_number)
    seed_fp = open(diff_file, "w")

    # write the header
    seed_fp.write("GeneID\tGeneSymbol\tDiff")
    for tissue_id in tissue_list:
        seed_fp.write("\t{}".format(tissue_id))
    seed_fp.write("\n")

    # write each top diff
    sorted_diffs = sorted(diff_list.items(),
                          key=operator.itemgetter(1),
                          reverse=True)

    for gene in zip(*(sorted_diffs[:TOP]))[0]:
        if diff_list[gene] == 0 or gene not in id_symbol_map:
            continue

        seed_fp.write("{}\t{}\t{}".format(gene, id_symbol_map[gene],
                                          diff_list[gene]))
        for tissue_id in tissue_list:
            seed_fp.write("\t{}".format(gene_rank[seed_number][tissue_id][gene]))
        seed_fp.write("\n")

    seed_fp.close()


def main(argv):

    if len(sys.argv) != 4:
        sys.exit("python {} <prediction dir> <seed dir> <mapping file>".format(sys.argv[0]))

    pred_dir = argv[1]
    seed_dir = argv[2]
    mapping = argv[3]

    tissue_list = (14, 20, 22, 33, 46, 51)
    # tissue_list = (30, 38, 43) # stomach, spleen, WBC
    seed_hash = {}
    id_symbol_map = sh.read_mapping(mapping)

    for i in xrange(1, 5):
        seed_file = "{}/seed{}.asso".format(seed_dir, i)
        seed_hash = sh.read_seed(seed_file, i, seed_hash)

    # generate and print a diff file for each seed (1, 2, 3, 4)
    for seed_number in xrange(1, 5):
        top_list = []
        gene_rank = {}

        for tissue_id in tissue_list:
            prediction_file = "{}/seed.{}.tis.{}.rwr".format(
                    pred_dir, seed_number, tissue_id)
            if seed_number not in gene_rank:
                gene_rank[seed_number] = {}

            # these are filtered for things not in the seed
            gene_rank[seed_number][tissue_id] = sh.read_rwr(prediction_file,
                                                         seed_hash,
                                                         seed_number)

            # need to filter for things that are in the seed
            # then get the top however many genes
            filtered_genes = [(g, r) for g, r
                              in gene_rank[seed_number][tissue_id].iteritems()]

            sorted_genes = sorted(filtered_genes, key=lambda x: x[1])[:TOP]

            for gene in zip(*sorted_genes)[0]:
                top_list.append(gene)

        # find the max and min ranks for each gene, then take the diff
        top_list = list(set(top_list))
        diff_list = {}
        for gene in top_list:
            min = 5000000
            max = 0
            rank_list = []

            for tissue_id in tissue_list:
                rank = gene_rank[seed_number][tissue_id][gene]
                rank_list.append(rank)
                if rank > max:
                    max = rank
                if rank < min:
                    min = rank

            diff_list[gene] = max - min

        # now, print the calculated diff scores for each seed
        write_diff_list(diff_list, tissue_list, seed_number, gene_rank, id_symbol_map)


if __name__ == "__main__":
    main(sys.argv)


